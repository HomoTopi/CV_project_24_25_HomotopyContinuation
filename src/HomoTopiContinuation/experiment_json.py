import numpy as np
import logging
import json
import pandas as pd
from itertools import product

from HomoTopiContinuation.SceneGenerator.scene_generator import SceneGenerator
from HomoTopiContinuation.ConicWarper.ConicWarper import ConicWarper
from HomoTopiContinuation.DataStructures.datastructures import Circle, SceneDescription, Img, Homography, Conics
from HomoTopiContinuation.Rectifier import standard_rectifier as sr, homotopyc_rectifier as hr
from HomoTopiContinuation.Losser import AngleDistortionLosser, CircleLosser, FrobNormLosser, LinfLosser


def sceneDefinition():
    """
    Define the parameters for the scene.
    Each parameter is a list of possible values.
    The function returns a tuple of lists, each containing the possible values for the respective parameter.
    """
    f_range = [1.0]
    y_rotation_range = [0, 25, 50]
    offset_range = [(0, 0, 2), (1, 1, 1), (2, 2, 2)]
    circle1_centers = [(0, 0), (0.1, 0.1)]
    circle1_radii = [1]
    circle2_centers = [(0.5, 0), (0.6, 0.1)]
    circle2_radii = [1]
    circle3_centers = [(0, 0), (0.1, 0.1)]
    circle3_radii = [1.5, 2]
    return f_range, y_rotation_range, offset_range, circle1_centers, circle1_radii, circle2_centers, circle2_radii, circle3_centers, circle3_radii  

def main():
    """
    Main function to run the experiment.
    It initializes the components, generates the scene, warps the conics,
    computes the loss, and converts the JSON data to a pandas DataFrame.
    Every step takes as input the JSON files generated by the previous step.
    """
    logging.basicConfig(
            filename='experimentJson.log',
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
            )
    logging.info("Starting the script...")
    logging.info("Initializing the components...")

    # Initialize the components
    scene_generator = SceneGenerator()
    conic_warper = ConicWarper()
    standard_rectifier = sr.StandardRectifier()
    homotopyc_rectifier = hr.HomotopyContinuationRectifier()

    logging.info("Components initialized successfully.")

    sceneDescription = sceneDefinition()

    logging.info("[Scene Described]")

    generateSceneDescriptionJson(*sceneDescription)

    logging.info("[Scene JSON Generated]")

    scene_generator.generate_scene()

    logging.info("[Scene Generated]")

    homotopyc_rectifier.rectify()

    logging.info("[Homotopy Continuation Rectification Done]")

    conic_warper.warpConics()

    logging.info("[Conic Warping Done]")

    computeLosses()
    
    logging.info("[Loss Computation Done]")

    json_to_df()

    logging.info("[JSON to DataFrame Conversion Done]")

def generateSceneDescriptionJson(f_range, y_rotation_range, offset_range, circle1_centers, circle1_radii, circle2_centers, circle2_radii, circle3_centers, circle3_radii):
    """"
    Generate a JSON file with all combinations of the parameters.
    """
    combinations = product(
        f_range,
        y_rotation_range,
        offset_range,
        circle1_centers,
        circle1_radii,
        circle2_centers,
        circle2_radii,
        circle3_centers,
        circle3_radii,
    )
    scenes = []

    for combo in combinations:
        (
            f, y_rot, offset,
            c1_center, c1_radius,
            c2_center, c2_radius,
            c3_center, c3_radius
        ) = combo

        circle1 = Circle(np.array(c1_center), c1_radius)
        circle2 = Circle(np.array(c2_center), c2_radius)
        circle3 = Circle(np.array(c3_center), c3_radius)
        scene = SceneDescription(f, y_rot, np.array(offset), circle1, circle2, circle3)
        scenes.append(scene.to_json())

    with open('src/HomoTopiContinuation/Data/sceneDescription.json', 'w') as file:
        json.dump(scenes, file, indent=4)

def computeLosses():
    """
    Compute the losses for the given scene and homography.
    """
    with open('src\\HomoTopiContinuation\\Data\\sceneDescription.json', 'r') as file:
        scene_data = json.load(file)
    with open('src\\HomoTopiContinuation\\Data\\sceneImage.json', 'r') as file:
        image_data = json.load(file)
    with open('src\\HomoTopiContinuation\\Data\\rectifiedHomography.json', 'r') as file:
        homography_data = json.load(file)
    with open('src\\HomoTopiContinuation\\Data\\rectifiedConics.json', 'r') as file:
        conics_data = json.load(file)

    losses = []
    for scene_json, img_json, H_json, conic_json in zip(scene_data, image_data, homography_data, conics_data):
        scene = SceneDescription.from_json(scene_json)
        img = Img.from_json(img_json)
        H = Homography.from_json(H_json)
        conics = Conics.from_json(conic_json)

        # Compute the loss for each type
        angle_loss = AngleDistortionLosser.AngleDistortionLosser.computeLoss(img.h_true, H)
        circle_loss = CircleLosser.CircleLosser.computeCircleLoss(scene, conics)
        frob_loss = FrobNormLosser.FrobNormLosser.computeLoss(img.h_true, H)
        linf_loss = LinfLosser.LinfLosser.computeLoss(img.h_true, H)

        losses.append({
            "angle_loss": angle_loss,
            "circle_loss": circle_loss,
            "frob_loss": frob_loss,
            "linf_loss": linf_loss
        })
    with open('src\\HomoTopiContinuation\\Data\\losses.json', 'w') as file:
        losses_serializable = json.loads(json.dumps(losses, default=str))
        json.dump(losses_serializable, file, indent=4)

def json_to_df() -> None:
    """
    Create a pandas dataframe from the JSON files with our resultsand save it to a CSV file.
    """
    json_sources = [
    ("scene", "src\\HomoTopiContinuation\\Data\\sceneDescription.json"),
    ("image", "src\\HomoTopiContinuation\\Data\\sceneImage.json"),
    ("homography", "src\\HomoTopiContinuation\\Data\\rectifiedHomography.json"),
    ("conics", "src\\HomoTopiContinuation\\Data\\rectifiedConics.json"),
    ("losses", "src\\HomoTopiContinuation\\Data\\losses.json")
    ]
    loaded_data = {}
    for col_name, file_path in json_sources:
        with open(file_path, "r") as f:
            loaded_data[col_name] = json.load(f)
    
    rows = []
    for scene_json, image_json, homography_json, conic_json, losses_json in zip(loaded_data['scene'], loaded_data['image'], loaded_data['homography'], loaded_data['conics'], loaded_data['losses']):
        row = extractFields(scene_json, image_json, homography_json, conic_json, losses_json)
        rows.append(row)

    # Create DataFrame
    df = pd.DataFrame(rows)
    print(df.head())  # Display the first few rows of the DataFrame

    # Save the DataFrame to a CSV file if needed
    df.to_csv('src\\HomoTopiContinuation\\Data\\dataframe.csv', index=False)

def extractFields(scene, image, homography, conics, losses):
    """
    Extract interesting fields from the JSON files in order to create a significant dataframe.
    """
    return {
        "circle1Center:": scene["circle1"]["center"],
        "circle2Center:": scene["circle2"]["center"],
        "circle3Center:": scene["circle3"]["center"],
        "circle1Radius:": scene["circle1"]["radius"],
        "circle2Radius:": scene["circle2"]["radius"],
        "circle3Radius:": scene["circle3"]["radius"],
        "f": scene["f"],
        "y_rotation": scene["y_rotation"],
        "offset": scene["offset"],
        "True homography": image["h_true"],
        "Warped conic 1": image["C_img"]["C1"],
        "Warped conic 2": image["C_img"]["C2"],
        "Warped conic 3": image["C_img"]["C3"],
        "rectified homography": homography["H"],
        "rectified conic 1": conics["C1"],
        "rectified conic 2": conics["C2"],
        "rectified conic 3": conics["C3"],
        "angle_loss": losses["angle_loss"],
        "circle_loss": losses["circle_loss"],
        "frob_loss": losses["frob_loss"],
        "linf_loss": losses["linf_loss"]
    }

if __name__ == "__main__":
    main()







